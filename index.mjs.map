{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport lnf from '@stdlib/math-base-special-lnf';\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32';\n\n\n// MAIN //\n\n/**\n* Computes the base `b` logarithm of a single-precision floating-point number.\n*\n* @param {NonNegativeNumber} x - input value\n* @param {NonNegativeNumber} b - base\n* @returns {number} logarithm (base `b`)\n*\n* @example\n* var v = logf( 100.0, 10.0 );\n* // returns 2.0\n*\n* @example\n* var v = logf( 16.0, 2.0 );\n* // returns 4.0\n*\n* @example\n* var v = logf( 5.0, 1.0 );\n* // returns Infinity\n*\n* @example\n* var v = logf( NaN, 2.0 );\n* // returns NaN\n*\n* @example\n* var v = logf( 1.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = logf( -4.0, 2.0 );\n* // returns NaN\n*\n* @example\n* var v = logf( 4.0, -2.0 );\n* // returns NaN\n*/\nfunction logf( x, b ) {\n\treturn float64ToFloat32( lnf( float64ToFloat32( x ) ) / lnf( float64ToFloat32( b ) ) );\n}\n\n\n// EXPORTS //\n\nexport default logf;\n"],"names":["logf","x","b","float64ToFloat32","lnf"],"mappings":";;yMA+DA,SAASA,EAAMC,EAAGC,GACjB,OAAOC,EAAkBC,EAAKD,EAAkBF,IAAQG,EAAKD,EAAkBD,IAChF"}